import csvimport random# Read the characters from the csv filecharacters_dictionary_list = []with open("characters.csv") as char_file:    dict_reader = csv.DictReader(char_file)    for item in dict_reader:        characters_dictionary_list.append(item)# Randomly select a mystery characternames_list = [character['Name'] for character in characters_dictionary_list]mystery = random.choice(names_list)# Main game loopdef play_game():    print_table()    # Current guess for the mystery character    current_guess = None    # Number of tries AKA loops    try_counter = 0    while current_guess != mystery:        try_counter += 1        pick_option = input("Would you like to guess or ask a question? (Guess/Question): ")        pick_option = pick_option.lower()        if pick_option == 'guess':            current_guess = guess_character(try_counter)        elif pick_option == 'question':            ask_question()# Print the remaining table of charactersdef print_table():    if len(characters_dictionary_list) != 0:        headers = list(characters_dictionary_list[0].keys())        #Max length of each column        column_widths = [len(header) for header in headers]        for row in characters_dictionary_list:            for i in range(len(headers)):                column_widths[i] = max(column_widths[i], len(str(row[headers[i]])))        #Print headers        header_line_parts = []        for i in range(len(headers)):            header_line_parts.append(headers[i] + ' ' * (column_widths[i] - len(headers[i])))        print(" | ".join(header_line_parts))        #Print divider line        divider_line_parts = []        for i in range(len(headers)):            divider_line_parts.append('-' * column_widths[i])        print("-+-".join(divider_line_parts))        #Print rows        for row in characters_dictionary_list:            row_values = []            for i in range(len(headers)):                value_str = str(row[headers[i]])                row_values.append(value_str + ' ' * (column_widths[i] - len(value_str)))            print(" | ".join(row_values))# Guess the mystery characterdef guess_character(try_counter):    global characters_dictionary_list # Use the global variable to modify the list    current_guess = input("Enter name of character to guess: ")    current_guess = current_guess.capitalize()    if mystery == current_guess:        print("Correct! You win!!")        print(f"That took you {try_counter} tries!")    else:        print("Sorry that is incorrect")        # Remove the guessed character from the list        characters_dictionary_list = [char for char in characters_dictionary_list if char['Name'] != current_guess]    return current_guess# Check if mystery character has the selected trait and optiondef has_trait(trait_guess, selected_trait):    for character in characters_dictionary_list:        if character['Name'] == mystery: # Check only the mystery character            trait_value = character.get(selected_trait)            if trait_value == trait_guess:                return True            else:                return False    return False# Ask a question about the mystery characterdef ask_question():    global characters_dictionary_list # Use the global variable to modify the list    # Get the list of traits    headers = list(characters_dictionary_list[0].keys())    headers.pop(0) # Remove the 'Name' header    # Print the list of traits    count = 1    for element in headers:        print(f"{count}. {element}")        count += 1    trait = input("Pick a trait to ask about: ")    trait_index = trait    trait_index = int(trait_index)    if 1 <= trait_index <= len(headers): # Check if the input is a valid trait number        selected_trait = headers[trait_index - 1]        print(f"Selected trait: {selected_trait.capitalize()}")        # Get the list of possible values for the selected trait        trait_values = set()        for character in characters_dictionary_list:            trait_value = character[selected_trait]            trait_values.add(trait_value)        # Print the list of values for the selected trait        print(f"Options for '{selected_trait.capitalize()}':")        for value in trait_values:            print(value.capitalize())    else:        print("Invalid trait number. Please enter a valid trait number.")        return    trait_guess = input("Please select an option: ")    trait_guess = trait_guess.capitalize()    # Check if the mystery character has the selected trait and option    confirmation = has_trait(trait_guess, selected_trait)    if confirmation == True:        print(f"Yes, the mystery character has {selected_trait.capitalize()}:{trait_guess}")        # Filter the list of characters based on the selected trait and option        characters_dictionary_list = [character for character in characters_dictionary_list if character[selected_trait] == trait_guess]    else:        # Remove the characters that do not have the selected trait and option        print(f"No, the mystery character does not have {selected_trait.capitalize()}:{trait_guess}")        filtered_list = []        for character in characters_dictionary_list:            trait_value = character.get(selected_trait)            if trait_value != trait_guess:                filtered_list.append(character)        characters_dictionary_list = filtered_list    print_table()if __name__ == "__main__":    play_game()